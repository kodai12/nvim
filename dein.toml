[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
if = '''has('nvim')'''
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
let NERDTreeShowHidden = 1
let g:nerdtree_tabs_open_on_console_startup=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'mhinz/vim-startify'

# make git convinient
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_max_signs = 500
'''

[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'joonty/vdebug'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'landscape',
  \ 'mode_map': {'c': 'NORMAL'},
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['gitbranch', 'readonly', 'filename', 'modified'],
  \   ],
  \   'right': [
  \     ['lineinfo', 'syntastic'],
  \     ['percent'],
  \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ }
  \ }
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'mbbill/undotree'

# tag/brackets completion
[[plugins]]
repo = 'cohama/lexima.vim'

# split screen resizable easily
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign='left'
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  autocmd BufWritePre * :FixWhitespace
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  let g:indentLine_fileTypeExclude = ['startify','help', 'nerdtree', 'tagbar', 'unite', 'tweetvim']
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

#solidity syntax
repo = 'tomlion/vim-solidity'

[[plugins]]
repo = 'hecal3/vim-leader-guide'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'othree/yajs.vim'

# vim completion
[[plugins]]
repo = 'Shougo/neco-vim'

# zsh completion
[[plugins]]
repo = 'zchee/deoplete-zsh'

# github completion
[[plugins]]
repo = 'SevereOverfl0w/deoplete-github'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'b4b4r07/vim-shellutils'

[[plugins]]
repo = 'heavenshell/vim-prettier'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'w0rp/ale'
depends = ['lightline']
hook_add = '''
let g:lightline = {
  \'active': {
  \  'left': [
  \    ['mode', 'paste'],
  \    ['readonly', 'filename', 'modified', 'ale'],
  \  ]
  \},
  \'component_function': {
  \  'ale': 'ALEGetStatusLine'
  \}
  \ }
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
'''

