[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
if = '''has('nvim')'''
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
let NERDTreeShowHidden = 1
let g:nerdtree_tabs_open_on_console_startup=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
call denite#custom#var('file_rec', 'command',
    \ ['rg', '--files', '--glob', '!.git', ''])
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'mhinz/vim-startify'

# make git convinient
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_max_signs = 500
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
let g:committia_open_only_vim_starting = 1
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  " Scroll the diff window from insert mode
  " Map <C-n> and <C-p>
  nmap <buffer><C-j> <Plug>(committia-scroll-diff-down-half)
  nmap <buffer><C-k> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
autocmd FileType agit call s:my_agit_setting()
function! s:my_agit_setting()
  nmap <buffer> ch <Plug>(agit-git-cherry-pick)
  nmap <buffer> Rv <Plug>(agit-git-revert)
endfunction
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'neoclide/denite-git'
hook_add = '''
call dein#add('Shougo/denite.nvim')
call dein#add('chemzqm/vim-easygit')
call dein#add('chemzqm/denite-git')
call denite#custom#map(
      \ 'normal',
      \ 'a',
      \ '<denite:do_action:add>',
      \ 'noremap'
      \)

call denite#custom#map(
      \ 'normal',
      \ 'd',
      \ '<denite:do_action:delete>',
      \ 'noremap'
      \)

call denite#custom#map(
      \ 'normal',
      \ 'r',
      \ '<denite:do_action:reset>',
      \ 'noremap'
      \)
'''

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'joonty/vdebug'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'landscape',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['gitbranch', 'readonly', 'filename', 'modified'],
  \   ],
  \   'right': [
  \     ['lineinfo', 'syntastic'],
  \     ['percent'],
  \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_expand': {
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_type': {
  \   'syntastic': 'error',
  \ },
  \ }
let g:syntastic_mode_map = { 'mode': 'passive',
      \                      'active_filetypes': ['c', 'cpp'] }
augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_jp = 1
let g:EasyMotion_use_migemo = 1
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_prompt = 'Search by leading {n} character >>> '
" <Leader>f{char} to move to {char}
map  f <Plug>(easymotion-bd-f)
nmap f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap <SPACE>f <Plug>(easymotion-overwin-f2)
vmap <SPACE>f <Plug>(easymotion-bd-f2)

" Move to line
map <SPACE>L <Plug>(easymotion-bd-jk)
nmap <SPACE>L <Plug>(easymotion-overwin-line)

" Move to word
map  <SPACE>w <Plug>(easymotion-bd-w)
nmap <SPACE>w <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'mbbill/undotree'

# tag/brackets completion
[[plugins]]
repo = 'cohama/lexima.vim'

# split screen resizable easily
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign='left'
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  autocmd BufWritePre * :FixWhitespace
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  let g:indentLine_fileTypeExclude = ['startify','help', 'nerdtree', 'tagbar', 'unite', 'tweetvim']
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

#solidity syntax
repo = 'tomlion/vim-solidity'

[[plugins]]
repo = 'hecal3/vim-leader-guide'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'othree/yajs.vim'

# css customize
[[plugins]]
repo = 'ap/vim-css-color'

# zsh completion
[[plugins]]
repo = 'zchee/deoplete-zsh'

# github completion
[[plugins]]
repo = 'SevereOverfl0w/deoplete-github'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'b4b4r07/vim-shellutils'

[[plugins]]
repo = 'prettier/vim-prettier'
hook_add = '''
let g:prettier#config#use_tabs = 'false'
let g:prettier#config#semi = 'true'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'es5'
'''

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'w0rp/ale'
depends = ['lightline']
hook_add = '''
" 保存時のみ実行する
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" 表示に関する設定
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W>'
highlight link ALEErrorSign Error
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_linters = {
\   'python': ['flake8'],
\   'php': ['phpstan'],
\   'javascript': ['eslint'],
\   'vue': ['prettier'],
\   'html': ['tidy'],
\   'css': ['stylelint'],
\   'sass': ['stylelint'],
\   'scss': ['stylelint'],
\   'sql': ['sqlint'],
\   'Dockerfile': ['hadolint'],
\   'json': ['jsonlint'],
\   'vim': ['vint'],
\}

let g:lightline = {
  \'active': {
  \  'left': [
  \    ['mode', 'paste'],
  \    ['readonly', 'filename', 'modified', 'ale'],
  \  ]
  \},
  \'component_function': {
  \  'ale': 'ALEGetStatusLine'
  \}
  \ }
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
'''

[[plugins]]
repo = 'mopp/sky-color-clock.vim'
depends = ['lightline']
hook_add = '''
" For lightline.vim
let g:lightline = {
            \ 'component': {
            \   'sky_color_clock': "%#SkyColorClock#%{' ' . sky_color_clock#statusline() . ' '}%#SkyColorClockTemp# ",
            \ },
            \ 'component_raw': {
            \   'sky_color_clock': 1,
            \ },
            \ }
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]]
repo = 'guns/xterm-color-table.vim'
