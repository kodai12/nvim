[[plugins]]
repo = 'Shougo/dein.vim'

# colorsheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  colorscheme iceberg
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
if = '''has('nvim')'''
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
let NERDTreeShowHidden = 1
let g:nerdtree_tabs_open_on_console_startup=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'mhinz/vim-startify'

# make git convinient
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_max_signs = 500
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
let g:committia_open_only_vim_starting = 1
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  " Scroll the diff window from insert mode
  " Map <C-n> and <C-p>
  nmap <buffer><C-j> <Plug>(committia-scroll-diff-down-half)
  nmap <buffer><C-k> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
autocmd FileType agit call s:my_agit_setting()
function! s:my_agit_setting()
  nmap <buffer> ch <Plug>(agit-git-cherry-pick)
  nmap <buffer> Rv <Plug>(agit-git-revert)
endfunction
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'joonty/vdebug'

[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let s:colorscheme = 'iceberg'
if !empty($COLORSCHEME)
  let s:colorscheme = $COLORSCHEME
endif
let g:lightline = {
  \ 'colorscheme': s:colorscheme,
  "\ 'separator': { 'left': "|", 'right': "|" },
  "\ 'subseparator': { 'left': "|", 'right': "|" },
  \ 'mode_map': {'c': 'NORMAL'},
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['fugitive', 'gitgutter'],
  \     ['pwd', 'filename']
  \   ],
  \   'right': [
  \     ['sky_color_clock'],
  \     ['lineinfo', 'syntax_check'],
  \     ['percent'],
  \     ['fileformat', 'fileencoding', 'filetype'],
  "\     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok']
  \   ]
  \ },
  \ 'component_function': {
  \   'mode': 'MyMode',
  \   'fugitive': 'MyFugitive',
  \   'gitgutter': 'MyGitgutter',
  \   'filename': 'MyFilename',
  \   'pwd': 'MyPwd',
  \   'fileformat': 'MyFileformat',
  \   'fileencoding': 'MyFileencoding',
  \   'filetype': 'MyFiletype',
  \ },
  \ 'component': {
  \   'sky_color_clock': "%#SkyColorClock#%{' ' . sky_color_clock#statusline() . ' '}%#SkyColorClockTemp# ",
  \ },
  \ 'component_raw': {
  \   'sky_color_clock': 1,
  \ },
  \ 'component_expand': {
  \   'syntax_check': 'qfstatusline#Update',
  \ },
  \ 'component_type': {
  \   'syntax_check': 'error',
  \ },
  \}
function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &readonly ? '*RO*'  : ''
endfunction

function! MyFilename()
    let fname = expand('%:t')
    return
          \ fname =~ '__Gundo' ? '' :
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ ('' != MyModified() ? ' ' . MyModified() : '') .
          \ '' != fname ? fname : '[No Name]')
endfunction

function! MyFugitive()
    try
      if expand('%:t') !~? 'Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? _ : ''
      endif
    catch
    endtry
    return ''
endfunction

function! MyGitgutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added . ' ',
          \ g:gitgutter_sign_modified . ' ',
          \ g:gitgutter_sign_removed . ' '
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
endfunction

function! MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! MyPwd()
    if winwidth(0) > 60
      let s:homepath = expand('~')
      return substitute(getcwd(), expand('~'), '~', '')
    else
      return ''
    endif
endfunction
'''

# [[plugins]]
# repo = 'maximbaz/lightline-ale'
# depends = ['lightline.vim', 'ale']
# hook_add = '''
# let g:lightline.component_expand = {
#       \  'linter_checking': 'lightline#ale#checking',
#       \  'linter_warnings': 'lightline#ale#warnings',
#       \  'linter_errors': 'lightline#ale#errors',
#       \  'linter_ok': 'lightline#ale#ok',
#       \ }
# let g:lightline.component_type = {
#       \     'linter_checking': 'left',
#       \     'linter_warnings': 'warning',
#       \     'linter_errors': 'error',
#       \     'linter_ok': 'left',
#       \ }
# '''

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'mbbill/undotree'

# tag/brackets completion
[[plugins]]
repo = 'cohama/lexima.vim'

# split screen resizable easily
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign='left'
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  autocmd BufWritePre * :FixWhitespace
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  let g:indentLine_fileTypeExclude = ['startify','help', 'nerdtree', 'tagbar', 'unite', 'tweetvim']
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

#solidity syntax
repo = 'tomlion/vim-solidity'

[[plugins]]
repo = 'hecal3/vim-leader-guide'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'othree/yajs.vim'

# css customize
[[plugins]]
repo = 'ap/vim-css-color'

# zsh completion
[[plugins]]
repo = 'zchee/deoplete-zsh'

# github completion
[[plugins]]
repo = 'SevereOverfl0w/deoplete-github'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'b4b4r07/vim-shellutils'

[[plugins]]
repo = 'prettier/vim-prettier'
hook_add = '''
let g:prettier#config#use_tabs = 'false'
let g:prettier#config#semi = 'true'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'es5'
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" 保存時のみ実行する
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" 表示に関する設定
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W>'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
highlight link ALEErrorSign Error

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_linters = {
\   'python': ['pyflakes', 'pep8', 'flake8'],
\   'php': ['phpstan'],
\   'javascript': ['eslint', 'eslint-plugin-vue'],
\   'typescript': ['tslint', 'eslint', 'typecheck'],
\   'vue': ['prettier'],
\   'html': ['tidy'],
\   'css': ['stylelint'],
\   'sass': ['stylelint'],
\   'scss': ['stylelint'],
\   'sql': ['sqlint'],
\   'Dockerfile': ['hadolint'],
\   'json': ['jsonlint'],
\   'vim': ['vint'],
\   'yaml': ['yamllint'],
\   'rust': ['cargo', 'rustc'],
\   'terraform': ['tflint'],
\}
'''

[[plugins]]
repo = 'mopp/sky-color-clock.vim'
hook_add = '''
set statusline+=%#SkyColorClockTemp#\ %#SkyColorClock#%{sky_color_clock#statusline()}
let g:sky_color_clock#openweathermap_city_id = '1856717' " 宮崎市
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]]
repo = 'guns/xterm-color-table.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
if = '''has('nvim')'''
hook_add = '''
  let g:tagbar_previewwin_pos    = "rightbelow"
  let g:tagbar_iconchars = ['▶', '▼']
  let g:tagbar_map_openallfolds  = '-'
  let g:tagbar_map_closeallfolds = '='
  let g:tagbar_sort              = 0
  let g:tagbar_show_visibility = 1
  let g:tagbar_singleclick = 1
  let g:tagbar_map_showproto = '<Nop>'
  let g:tagbar_map_nexttag   = '<C-j>'
  let g:tagbar_map_prevtag   = '<C-k>'
  let g:tagbar_map_openfold  = '<Space>vo'
  let g:tagbar_map_closefold = '<Space>vc'
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
'''

[[plugins]]
repo = 'twitvim/twitvim'
hook_add = '''
let twitvim_browser_cmd = 'open' " for Mac
let twitvim_force_ssl = 1
let twitvim_count = 40
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
let g:gutentags_ctags_tagfile = '.git/tags'
'''
